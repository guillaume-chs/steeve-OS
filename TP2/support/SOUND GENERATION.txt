SOUND GENERATIONPort 43h provides access to the registers of port 42h. First store the magic value 0xb6 to port 43h, then load two 8 bit values into port 42h, which specify the frequency to generate. Once this is done, turning on bits 1 and 0 of port 61h will enable the circuitry and produce the tone. Summarising the steps, they are1: Output 0xb6 to port 43h2: Send each of the 8 bit values to port 42h3: Enable bits 0 and 1 of port 61hStep 1 is achieved by the C statement outportb( 0x43, 0xb6 );Step 2 is achieved by converting the frequency into two eight bit values, then outputting them to port 42h. The Most Significant Byte is sent last.	Frequency required to generate = 512 hertz	16 bit value = 120000h / frequencyso, this is achieved by the C statements	outportb(0x42,0)	outportb(0x42,6)Step 3 is achieved by the C statements	byte = inportb(0x61);	byte |= 3;	outportb(0x61, byte);Connecting this together into a function, it becomes,	void tone_512() {		char byte;		outportb(0x43, 0xb6);		outportb(0x42, 0);		outportb(0x42, 6);		byte = inportb(0x61);		byte |= 3;		outportb(0x61, byte);	}There follows two routines to generate sound using the timer chip. The first, beep(), sounds a note of 1000hz for a short duration. The second, note() allows you to specify the frequency and duration of the desired note.	#include <dos.h>	void beep() {		int delay;		_AL = 0xb6;		outportb(0x43,_AL); /* write to timer mode register */		_AX = 0x533; /* divisor for 1000hz */		outportb(0x42,_AL); /* write LSB */		_AL = _AH;		outportb(0x42,_AL); /* write MSB */		_AL = inportb(0x61); /* get current port setting */		_AH = _AL; /* save it in _AH */		_AL |= 3; /* turn speaker on */		outportb(0x61,_AL);		for(delay = 0; delay < 20000; delay++)			;		_AL = _AH;		outportb(0x61,_AL); /* restore original settings */	}	int note( frequency, duration )	unsigned int frequency, duration;	{		unsigned long delay;		if( frequency > 5000 ) return 1;		_AL = 0xb6;		outportb(0x43,_AL); /* write to timer mode register */		_AX = 0x120000L / frequency; /* calculate divisor required */		outportb(0x42,_AL); /* write LSB */		_AL = _AH;		outportb(0x42,_AL); /* write MSB */		_AL = inportb(0x61); /* get current port setting */		_AL |= 3; /* turn speaker on */		outportb(0x61,_AL);		for(delay = 0L; delay < (long) duration * 45; delay++)			;		_AL = inportb(0x61); /* turn off sound */		_AL &= 0xfc; /* set bits 1 and 0 off */		outportb(0x61,_AL); /* restore original settings */		return 0;	}	main() {		unsigned int f;		for(f = 100; f < 250; f += 10 ) {			note( f, (unsigned int) 1000 ); /* 1000 = 1 second */		}	}